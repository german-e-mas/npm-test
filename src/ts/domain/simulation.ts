/* eslint-disable */
import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../google/protobuf/timestamp";
import { Artifact } from "../domain/artifact";

/**
 * Copyright (C) 2022 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simulation contains information about a simulation run.
 * There is a one-to-one relationship between a Simulation and a Scenario.
 */
export interface Simulation {
  /**
   * GroupId is the Simulation identifier. It's used across different services when they need to refer
   * to a specific Simulation.
   */
  groupId: string;
  /**
   * LaunchedAt is the date and time at which this Simulation has been launched.
   * A nil value means that the simulation hasn't been launched yet, and is likely waiting in a queue to get picker up by a worker.
   */
  launchedAt: Date | undefined;
  /** StoppedAt is the date and time at which this Simulation has stopped. */
  stoppedAt: Date | undefined;
  /** Name contains a user-defined name for this Simulation. */
  name: string;
  /** Image contains a URL to a valid OCI image that was used to run this simulation. */
  image: string;
  /** Status contains the current status of this Simulation. */
  status: string;
  /**
   * Error contains an error message explaining why the simulation failed. If set to nil, the simulation doesn't have
   * any errors.
   */
  error: string;
  /** Artifacts are set of links where to download the artifacts generated by this simulation. */
  artifacts: Artifact[];
}

function createBaseSimulation(): Simulation {
  return {
    groupId: "",
    launchedAt: undefined,
    stoppedAt: undefined,
    name: "",
    image: "",
    status: "",
    error: "",
    artifacts: [],
  };
}

export const Simulation = {
  encode(
    message: Simulation,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.groupId !== "") {
      writer.uint32(10).string(message.groupId);
    }
    if (message.launchedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.launchedAt),
        writer.uint32(18).fork()
      ).ldelim();
    }
    if (message.stoppedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.stoppedAt),
        writer.uint32(26).fork()
      ).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.image !== "") {
      writer.uint32(42).string(message.image);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(58).string(message.error);
    }
    for (const v of message.artifacts) {
      Artifact.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Simulation {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.groupId = reader.string();
          break;
        case 2:
          message.launchedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32())
          );
          break;
        case 3:
          message.stoppedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32())
          );
          break;
        case 4:
          message.name = reader.string();
          break;
        case 5:
          message.image = reader.string();
          break;
        case 6:
          message.status = reader.string();
          break;
        case 7:
          message.error = reader.string();
          break;
        case 8:
          message.artifacts.push(Artifact.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Simulation {
    return {
      groupId: isSet(object.groupId) ? String(object.groupId) : "",
      launchedAt: isSet(object.launchedAt)
        ? fromJsonTimestamp(object.launchedAt)
        : undefined,
      stoppedAt: isSet(object.stoppedAt)
        ? fromJsonTimestamp(object.stoppedAt)
        : undefined,
      name: isSet(object.name) ? String(object.name) : "",
      image: isSet(object.image) ? String(object.image) : "",
      status: isSet(object.status) ? String(object.status) : "",
      error: isSet(object.error) ? String(object.error) : "",
      artifacts: Array.isArray(object?.artifacts)
        ? object.artifacts.map((e: any) => Artifact.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Simulation): unknown {
    const obj: any = {};
    message.groupId !== undefined && (obj.groupId = message.groupId);
    message.launchedAt !== undefined &&
      (obj.launchedAt = message.launchedAt.toISOString());
    message.stoppedAt !== undefined &&
      (obj.stoppedAt = message.stoppedAt.toISOString());
    message.name !== undefined && (obj.name = message.name);
    message.image !== undefined && (obj.image = message.image);
    message.status !== undefined && (obj.status = message.status);
    message.error !== undefined && (obj.error = message.error);
    if (message.artifacts) {
      obj.artifacts = message.artifacts.map((e) =>
        e ? Artifact.toJSON(e) : undefined
      );
    } else {
      obj.artifacts = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Simulation>, I>>(
    object: I
  ): Simulation {
    const message = createBaseSimulation();
    message.groupId = object.groupId ?? "";
    message.launchedAt = object.launchedAt ?? undefined;
    message.stoppedAt = object.stoppedAt ?? undefined;
    message.name = object.name ?? "";
    message.image = object.image ?? "";
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    message.artifacts =
      object.artifacts?.map((e) => Artifact.fromPartial(e)) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = t.seconds * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
